/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from './tree-view-demo';
import * as import3 from '@angular/core/src/linker/element';
import * as import4 from './tree-view';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from './tree-view.ngfactory';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/component_factory';
const styles_TreeViewDemo:any[] = [];
var renderType_TreeViewDemo:import0.RenderComponentType = null;
class _View_TreeViewDemo0 extends import1.AppView<import2.TreeViewDemo> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  private _appEl_2:import3.AppElement;
  _TreeView_2_4:import4.TreeView;
  _text_3:any;
  _el_4:any;
  _el_5:any;
  _text_6:any;
  private _expr_0:any;
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import3.AppElement) {
    super(_View_TreeViewDemo0,renderType_TreeViewDemo,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'h1',null);
    this._text_1 = this.renderer.createText(this._el_0,'Recursive TreeView',null);
    this._el_2 = this.renderer.createElement(parentRenderNode,'tree-view',null);
    this._appEl_2 = new import3.AppElement(2,null,this,this._el_2);
    var compView_2:any = import9.viewFactory_TreeView0(this.viewUtils,this.injector(2),this._appEl_2);
    this._TreeView_2_4 = new import4.TreeView();
    this._appEl_2.initComponent(this._TreeView_2_4,[],compView_2);
    compView_2.create(this._TreeView_2_4,[],null);
    this._text_3 = this.renderer.createText(parentRenderNode,'          ',null);
    this._el_4 = this.renderer.createElement(parentRenderNode,'h4',null);
    this._el_5 = this.renderer.createElement(this._el_4,'a',null);
    this.renderer.setElementAttribute(this._el_5,'href','http://www.syntaxsuccess.com/viewarticle/recursive-treeview-in-angular-2.0');
    this._text_6 = this.renderer.createText(this._el_5,'Read more here',null);
    this._expr_0 = import8.uninitialized;
    this.init([],[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._el_5,
      this._text_6
    ]
    ,[],[]);
    return null;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import4.TreeView) && (2 === requestNodeIndex))) { return this._TreeView_2_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0:any = this.context.directories;
    if (import5.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._TreeView_2_4.directories = currVal_0;
      this._expr_0 = currVal_0;
    }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_TreeViewDemo0(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import3.AppElement):import1.AppView<import2.TreeViewDemo> {
  if ((renderType_TreeViewDemo === null)) { (renderType_TreeViewDemo = viewUtils.createRenderComponentType('/Users/tor/Development/angular2-offline-compiler/src/app/treeview/tree-view-demo.ts class TreeViewDemo - inline template',0,import10.ViewEncapsulation.None,styles_TreeViewDemo)); }
  return new _View_TreeViewDemo0(viewUtils,parentInjector,declarationEl);
}
var renderType_TreeViewDemo_Host:import0.RenderComponentType = null;
class _View_TreeViewDemo_Host0 extends import1.AppView<any> {
  _el_0:any;
  private _appEl_0:import3.AppElement;
  _TreeViewDemo_0_4:import2.TreeViewDemo;
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import3.AppElement) {
    super(_View_TreeViewDemo_Host0,renderType_TreeViewDemo_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import3.AppElement {
    this._el_0 = this.selectOrCreateHostElement('treeview',rootSelector,null);
    this._appEl_0 = new import3.AppElement(0,null,this,this._el_0);
    var compView_0:any = viewFactory_TreeViewDemo0(this.viewUtils,this.injector(0),this._appEl_0);
    this._TreeViewDemo_0_4 = new import2.TreeViewDemo();
    this._appEl_0.initComponent(this._TreeViewDemo_0_4,[],compView_0);
    compView_0.create(this._TreeViewDemo_0_4,this.projectableNodes,null);
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import2.TreeViewDemo) && (0 === requestNodeIndex))) { return this._TreeViewDemo_0_4; }
    return notFoundResult;
  }
}
function viewFactory_TreeViewDemo_Host0(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import3.AppElement):import1.AppView<any> {
  if ((renderType_TreeViewDemo_Host === null)) { (renderType_TreeViewDemo_Host = viewUtils.createRenderComponentType('',0,null,[])); }
  return new _View_TreeViewDemo_Host0(viewUtils,parentInjector,declarationEl);
}
export const TreeViewDemoNgFactory:import11.ComponentFactory<import2.TreeViewDemo> = new import11.ComponentFactory<import2.TreeViewDemo>('treeview',viewFactory_TreeViewDemo_Host0,import2.TreeViewDemo);