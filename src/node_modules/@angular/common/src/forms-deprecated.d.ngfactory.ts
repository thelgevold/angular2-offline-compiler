/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/common/src/forms-deprecated';
import * as import2 from '@angular/common/src/forms-deprecated/form_builder';
import * as import3 from '@angular/common/src/forms-deprecated/directives/radio_control_value_accessor';
import * as import4 from '@angular/core/src/di/injector';
class DeprecatedFormsModuleInjector extends import0.NgModuleInjector<import1.DeprecatedFormsModule> {
  _DeprecatedFormsModule_0:import1.DeprecatedFormsModule;
  __FormBuilder_1:import2.FormBuilder;
  __RadioControlRegistry_2:import3.RadioControlRegistry;
  constructor(parent:import4.Injector) {
    super(parent,[],[]);
  }
  get _FormBuilder_1():import2.FormBuilder {
    if ((this.__FormBuilder_1 == null)) { (this.__FormBuilder_1 = new import2.FormBuilder()); }
    return this.__FormBuilder_1;
  }
  get _RadioControlRegistry_2():import3.RadioControlRegistry {
    if ((this.__RadioControlRegistry_2 == null)) { (this.__RadioControlRegistry_2 = new import3.RadioControlRegistry()); }
    return this.__RadioControlRegistry_2;
  }
  createInternal():import1.DeprecatedFormsModule {
    this._DeprecatedFormsModule_0 = new import1.DeprecatedFormsModule();
    return this._DeprecatedFormsModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.DeprecatedFormsModule)) { return this._DeprecatedFormsModule_0; }
    if ((token === import2.FormBuilder)) { return this._FormBuilder_1; }
    if ((token === import3.RadioControlRegistry)) { return this._RadioControlRegistry_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const DeprecatedFormsModuleNgFactory:import0.NgModuleFactory<import1.DeprecatedFormsModule> = new import0.NgModuleFactory(DeprecatedFormsModuleInjector,import1.DeprecatedFormsModule);